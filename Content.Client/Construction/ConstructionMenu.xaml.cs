#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.GameObjects.EntitySystems;
using Content.Client.Utility;
using Content.Shared.GameObjects.Components;
using Content.Shared.GameObjects.Components.Interactable;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Interfaces.Placement;
using Robust.Client.Interfaces.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Enums;
using Robust.Shared.GameObjects.Systems;
using Robust.Shared.Interfaces.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;

namespace Content.Client.Construction
{
    public interface IConstructionMenuView : IDisposable
    {
        event EventHandler<(string search, string catagory)> PopulateRecipes;
        event EventHandler<ItemList> PopulateRecipeInfo;
        event EventHandler<ItemList.Item?> RecipeSelected;
        event EventHandler<bool> BuildButtonToggled;
        event EventHandler<bool> EraseButtonToggled; 

        void ClearInfo();
        void SetInfo(string prototypeName, string prototypeDescription, Texture prototypeTexture, bool isItem);

        ItemList Recipes { get; }
        ItemList RecipeStepList { get; }

        OptionButton CategoryButton { get; }
        string[] Categories { get; set; }

        string SearchText { get; }

        event EventHandler ClearAllGhosts;

        bool BuildButtonPressed { get; set; }

        bool EraseButtonPressed { get; set; }
        void ResetPlacement();

        #region Control

        event Action? OnClose;

        bool IsOpen { get; }

        void OpenCentered();
        void MoveToFront();
        bool IsAtFront();
        void Close();

        #endregion

    }
    
    [GenerateTypedNameReferences]
    public partial class ConstructionMenu : SS14Window, IConstructionMenuView
    {
        public string SearchText => SearchBar.Text;
        public event EventHandler? ClearAllGhosts;

        protected override Vector2? CustomSize => (720, 320);

        private string[] _categories = Array.Empty<string>();

        public event EventHandler<(string search, string catagory)>? PopulateRecipes;
        public event EventHandler<ItemList>? PopulateRecipeInfo;
        public event EventHandler<ItemList.Item?>? RecipeSelected;
        public event EventHandler<bool>? BuildButtonToggled;
        public event EventHandler<bool>? EraseButtonToggled;

        /// <inheritdoc />
        public ItemList Recipes => RecipesList;

        public ItemList RecipeStepList => StepList;

        public OptionButton CategoryButton => Category;

        public bool BuildButtonPressed
        {
            get => BuildButton.Pressed;
            set => BuildButton.Pressed = value;
        }

        public bool EraseButtonPressed
        {
            get => EraseButton.Pressed;
            set => EraseButton.Pressed = value;
        }

        public string[] Categories
        {
            get => _categories;
            set => _categories = value;
        }

        public ConstructionMenu()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            
            Title = Loc.GetString("Construction");

            BuildButton.Text = Loc.GetString("Place construction ghost");
            RecipesList.OnItemSelected += obj => RecipeSelected?.Invoke(this, obj.ItemList[obj.ItemIndex]);
            RecipesList.OnItemDeselected += (args => RecipeSelected?.Invoke(this, null));

            SearchBar.OnTextChanged += obj =>
            {
                PopulateRecipes?.Invoke(this, (SearchBar.Text, _categories[Category.SelectedId]));
            };
            Category.OnItemSelected += obj =>
            {
                Category.SelectId(obj.Id);
                PopulateRecipes?.Invoke(this, (SearchBar.Text, _categories[obj.Id]));
            };

            BuildButton.Text = Loc.GetString("Place construction ghost");
            BuildButton.OnToggled += (args => BuildButtonToggled?.Invoke(this, args.Pressed));
            ClearButton.Text = Loc.GetString("Clear All");
            ClearButton.OnPressed += _ => ClearAllGhosts?.Invoke(this, EventArgs.Empty);
            EraseButton.Text = Loc.GetString("Eraser Mode");
            EraseButton.OnToggled += args => EraseButtonToggled?.Invoke(this, args.Pressed);
        }

        public void ResetPlacement()
        {
            BuildButton.Pressed = false;
            EraseButton.Pressed = false;
        }

        public void SetInfo(string prototypeName, string prototypeDescription, Texture prototypeTexture, bool isItem)
        {
            BuildButton.Disabled = false;
            BuildButton.Text = Loc.GetString(isItem ? "Place construction ghost" : "Craft");
            TargetName.SetMessage(prototypeName);
            TargetDesc.SetMessage(prototypeDescription);
            TargetTexture.Texture = prototypeTexture;
        }

        public void ClearInfo()
        {
            BuildButton.Disabled = true;
            TargetName.SetMessage(string.Empty);
            TargetDesc.SetMessage(string.Empty);
            TargetTexture.Texture = null;
            StepList.Clear();
        }

        /// <inheritdoc />
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
            }
        }
    }
}
